{"version":3,"sources":["services/data.js","components/reitti.js","components/linjat.js","App.js","index.js"],"names":["data","linjastot","pysakit","tiet","stops","dataService","routes","initRouteInformation","allRoutes","console","log","n","length","graph","Array","fill","times","from","e","index","route","i","findIndex","p","mista","j","mihin","to","routeNetwork","net","indexFrom","s","indexTo","Math","abs","filterRoute","array","splice","kesto","stop","toUpperCase","trim","time","visited","queue","concat","a","shift","next","oldTime","newTime","push","algorithm","routeFromTo","k","unshift","printRoute","linjatKaikki","reitti","linjat","kuljetutLinjat","linja","pysakitLinjan","f","t","kasittele","Yhteenveto","aika","Tiedot","reitinAjat","linjaComponent","kaikkiPysakit","tauluntiedot","map","pysakki","key","Table","striped","colSpan","Lomake","setReitti","setAika","setReitinAjat","setMessage","message","handleMistaChange","handleMihinChange","Form","onSubmit","event","preventDefault","reittiComponent","polku","Alert","variant","onClose","dismissible","Group","value","onChange","Button","type","Header","Navbar","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Link","href","Text","App","useState","setMista","setMihin","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0478f04.chunk.js","sourcesContent":["import data from '../data/data.json'\r\n\r\nconst getAll = () => {\r\n    return data\r\n}\r\n\r\nconst getLinjastot = () => {\r\n    return data.linjastot\r\n}\r\n\r\nconst getPysakit = () => {\r\n    return data.pysakit\r\n}\r\n\r\nconst getTiet = () => {\r\n    return data.tiet\r\n}\r\n\r\nexport default {\r\n    getAll, \r\n    getLinjastot,\r\n    getPysakit,\r\n    getTiet,\r\n}","import dataService from '../services/data'\r\n\r\nconst stops = dataService.getPysakit()\r\nconst routes = dataService.getTiet()\r\n\r\nconst filterRoute = (from, to) => {\r\n    //if the route is not covered by busses return true\r\n    const routeNetwork = dataService.getLinjastot()\r\n    \r\n    for (const route in routeNetwork) {\r\n        const net = routeNetwork[route]\r\n        const indexFrom = net.findIndex(s => s === stops[from])\r\n        const indexTo = net.findIndex(s => s === stops[to])\r\n        //if bus network don't contain route skip to next network\r\n        if(indexFrom === -1 || indexTo === -1) {\r\n            continue\r\n        }\r\n        //Check that wanted stops are next to each other\r\n        if(Math.abs(indexFrom-indexTo)< 2) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nconst initRouteInformation = (allRoutes) => {\r\n    console.log('init...')\r\n    const n = stops.length\r\n    const graph = new Array(n).fill([]) //Contains stops and next stops\r\n    const times = Array.from({ length: n }, e => new Array(n).fill(0)) //contains times between stops\r\n\r\n    //init graph and times\r\n    for (let index = 0; index < routes.length; index++) {\r\n        const route = routes[index]\r\n        const i = stops.findIndex((p) => p === route.mista)\r\n        const j = stops.findIndex((p) => p === route.mihin)\r\n        if(!allRoutes && filterRoute(i, j)) {\r\n            continue\r\n        }\r\n        \r\n        let array = [...graph[i]]\r\n        array.splice(0, 0, j)\r\n        graph.splice(i, 1, array)\r\n        array = [...graph[j]]\r\n        array.splice(0, 0, i)\r\n        graph.splice(j, 1, array)\r\n\r\n        //Lisätään reitin kesto\r\n        times[i][j] = route.kesto\r\n        times[j][i] = route.kesto\r\n    }\r\n    console.log('...init done')\r\n    return [graph, times]\r\n}\r\n\r\nconst algorithm = (from, to) => {\r\n    const [graph, times] = initRouteInformation(false) //true all possible routes. False only routes available to busses\r\n    let time = new Array(stops.length).fill(9999999)\r\n    let visited = new Array(stops.length).fill(0)\r\n    let route = []\r\n\r\n    time[from] = 0;\r\n\r\n    let queue = [].concat(from)\r\n    console.log('Searching distances...')\r\n\r\n    //Start with form\r\n    //Update distance to its neighbours\r\n    //Add neighbours to queue\r\n    //start over untill reached destination or all stops are isited\r\n    while (queue.length !== 0) {\r\n        const a = queue.shift()\r\n        if (visited[a] === 1) {\r\n            continue\r\n        }\r\n        visited[a] = 1\r\n        for (let i = 0; i < graph[a].length; i++) {\r\n            const next = graph[a][i]\r\n            const oldTime = time[next]\r\n            const newTime = time[a] + times[a][next]\r\n            queue.push(next)\r\n            if (newTime < oldTime) {\r\n                time[next] = newTime\r\n                route[next] = a\r\n            }\r\n            //reverse distance to double check\r\n            if (time[a] > time[next] + times[a][next]) {\r\n                time[a] = time[next] + times[a][next]\r\n                visited[a] = 0\r\n                route[a] = next\r\n                queue.push(a)\r\n            }\r\n        }\r\n        if (a === to) {\r\n            console.log('...Found faster...')\r\n            break\r\n        }\r\n    }\r\n    console.log('...Route found')\r\n    if(time[to] === 9999999) {\r\n        return [[], '-']\r\n    }\r\n    return [route, time]\r\n}\r\n\r\nconst printRoute = (route, from, to) => {\r\n    if(route.length===0) {\r\n        return []\r\n    }\r\n    console.log('print route...')\r\n    let k = to\r\n    let routeFromTo = []\r\n    \r\n    while (k !== from) {\r\n        routeFromTo.unshift(stops[k])\r\n        k = route[k]\r\n    }\r\n    routeFromTo.unshift(stops[from])\r\n    console.log('...print route done')\r\n    return routeFromTo\r\n}\r\n\r\nconst getRoute = (from, to) => {\r\n    console.log('search...')\r\n    //find index: from & to\r\n    from = stops.findIndex(stop => stop === from.toUpperCase().trim())\r\n    to = stops.findIndex(stop => stop === to.toUpperCase().trim())\r\n\r\n    //Check that stops are in database\r\n    if (from === -1 || to === -1) {\r\n        console.log(`Can't find stop`, {from}, {to})\r\n        return [[], '']\r\n    }\r\n\r\n    //Stops are not same\r\n    if (from === to) {\r\n        return [stops[from], 0]\r\n    }\r\n    //Find route and time\r\n    const [route, time] = algorithm(from, to)\r\n    \r\n    //Make shortest route readable\r\n    const routeFromTo = printRoute(route, from, to)\r\n    \r\n    console.log('...search done')\r\n    return [routeFromTo, time[to], time]\r\n}\r\n\r\nexport default { getRoute }","import dataService from '../services/data'\r\nconst linjatKaikki = dataService.getLinjastot()\r\n\r\nconst kasittele = (reitti) => {\r\n    console.log('käsittele reittiä...')\r\n    const kuljetutLinjat = new Array(reitti.length - 1).fill([])\r\n    console.log({ reitti })\r\n    console.log({ linjatKaikki })\r\n\r\n    for (let index = 1; index < reitti.length; index++) {\r\n        for (const linja in linjatKaikki) {\r\n            const pysakitLinjan = linjatKaikki[linja]\r\n            //console.log({pysakitLinjan})\r\n            const f = pysakitLinjan.findIndex(p => p === reitti[index - 1])\r\n            const t = pysakitLinjan.findIndex(p => p === reitti[index])\r\n            //console.log(reitti[index - 1], reitti[index])\r\n\r\n            //Tarkistetaan, että reittiväliä voi kulkea kyseisellä linjalla\r\n            if (f === -1 || t === -1) {\r\n                continue\r\n            }\r\n            //Tarkistetaan, että linjan pysäkit ovat vierekkäin\r\n            if (Math.abs(f - t) < 2) {\r\n                kuljetutLinjat[index - 1] = kuljetutLinjat[index - 1].concat(linja + ' ')\r\n            }\r\n        }\r\n    }\r\n    //console.log({ kuljetutLinjat })\r\n    console.log('...käsitelty')\r\n    return kuljetutLinjat\r\n}\r\n\r\nconst haeLinjat = (reitti) => {\r\n    console.log('Haetaan linjoja...')\r\n    console.log({ reitti })\r\n    \r\n    //Tarkistetaan, että reittiä pitkin voi kulkea\r\n    if (reitti.length < 1) {\r\n        console.log('Tyhjä', { reitti })\r\n        return []\r\n    }\r\n\r\n    //Haetaan käytettäviä linjoja\r\n    const linjat = kasittele(reitti)\r\n    \r\n    console.log('...linjat haettu')\r\n    return linjat\r\n}\r\n\r\nexport default { haeLinjat }","import React, { useState } from 'react'\nimport reittiComponent from './components/reitti'\nimport linjaComponent from './components/linjat'\nimport dataService from './services/data'\nimport { Table, Alert, Button, Form, Nav, Navbar } from 'react-bootstrap'\n\nconst Yhteenveto = ({ aika, reitti }) => (\n  <div>\n    <br />\n    <b>Reitti: </b>{reitti[0]}-{reitti[reitti.length - 1]}\n    <b> Aika: </b>{aika}\n    <br />\n  </div>\n)\n\nconst Tiedot = ({ reitti, aika, reitinAjat }) => {\n  if (reitti.length < 1) {\n    return (<></>)\n  }\n\n  if (reitti.length < 2) {\n    return (\n      <div>\n        <br />\n        <b>Olet jo perillä!</b>\n      </div>\n    )\n  }\n\n  const linjat = linjaComponent.haeLinjat(reitti).concat('------')\n  const kaikkiPysakit = dataService.getPysakit()\n\n  let tauluntiedot = reitti.map(pysakki => (\n    <tr key={pysakki}>\n      <td>\n        {reitinAjat[kaikkiPysakit.findIndex(p => p === pysakki)]}\n      </td>\n      <td>\n        {pysakki}\n      </td>\n      <td>\n        {linjat[reitti.findIndex(p => pysakki === p)]}\n      </td>\n    </tr>\n  ))\n\n  return (\n    <div>\n      <Yhteenveto aika={aika} reitti={reitti} />\n      <Table striped>\n        <tbody>\n          <tr>\n            <th>Aika</th>\n            <th>Pysäkki</th>\n            <th colSpan={999}>Linjat</th>\n          </tr>\n          {tauluntiedot}\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n\nconst Lomake = ({ mista, mihin, setReitti, setAika, setReitinAjat, setMessage, message, handleMistaChange, handleMihinChange }) => {\n\n  const haeReitti = (event) => {\n    event.preventDefault()\n    console.log(`Haetaan reittiä ${mista} -> ${mihin}`)\n    const [polku, aika, reitinAjat] = reittiComponent.getRoute(mista, mihin)\n    console.log('Lomake', { polku }, { aika }, { reitinAjat })\n    setReitti(polku)\n    setAika(aika)\n    setReitinAjat(reitinAjat)\n    if (polku.length < 1) {\n      setMessage('Reittiä ei löydy! Tarkistathan, että haet oikealla pysäkillä!!!')\n    }\n  }\n  const pysakit = dataService.getPysakit().map(p => `${p} `)\n  return (\n    <Form onSubmit={haeReitti} >\n      {(message &&\n        <Alert variant=\"warning\" onClose={() => setMessage(null)} dismissible>\n          {message}\n          <hr />\n          Pysakit: {pysakit}\n        </Alert>)\n      }\n      <Form.Group>\n        <b>Hae reittiä: </b>\n      </Form.Group>\n      <Form.Group>\n        <b>Mistä: </b><input value={mista} onChange={handleMistaChange} />\n      </Form.Group>\n      <Form.Group>\n        <b>Minne: </b><input value={mihin} onChange={handleMihinChange} />\n      </Form.Group>\n      <Button type=\"submit\" variant=\"primary\">Hae reitti</Button>\n    </Form>\n  )\n}\n\nconst Header = () => (\n  <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\n    <Navbar.Brand>Reittihaku-sovellus</Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n      <Nav className=\"head\">\n        <Nav.Link href=\"https://koodihaaste.solidabis.com/?utm_source=facebook&utm_medium=banner&utm_campaign=koodihaaste&fbclid=IwAR2mF2954_gj316eu1Y2dyiFKr31QwEylsvxfqLees7TZMo6_Z8EQGzR4cc\">\n          Reittihaku-sovellus osana Solidabis Oy koodihaastetta\n        </Nav.Link>\n        <Nav.Link href=\"https://github.com/veliValentine/Reittiopas\">\n          Lähdekoodi\n        </Nav.Link>\n        <Navbar.Text>\n          by Nicolas Valentine\n        </Navbar.Text>\n      </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n)\n\nconst App = () => {\n  const [mista, setMista] = useState('')\n  const [mihin, setMihin] = useState('')\n  const [reitti, setReitti] = useState([])\n  const [aika, setAika] = useState('')\n  const [reitinAjat, setReitinAjat] = useState([])\n  const [message, setMessage] = useState(null)\n\n  const handleMihinChange = (event) => {\n    setMihin(event.target.value)\n    setMessage(null)\n  }\n\n  const handleMistaChange = (event) => {\n    setMista(event.target.value)\n    setMessage(null)\n  }\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <br />\n      <h2>Reittihaku</h2>\n      <Lomake\n        mista={mista}\n        mihin={mihin}\n        setReitti={setReitti}\n        setAika={setAika}\n        setReitinAjat={setReitinAjat}\n        setMessage={setMessage}\n        message={message}\n        handleMistaChange={handleMistaChange}\n        handleMihinChange={handleMihinChange}\n      />\n      <Tiedot reitti={reitti} aika={aika} reitinAjat={reitinAjat} />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}